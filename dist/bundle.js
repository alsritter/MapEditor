/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/canvasController.js":
/*!************************************!*\
  !*** ./src/js/canvasController.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getMapData\": () => (/* binding */ getMapData),\n/* harmony export */   \"drawCanvas\": () => (/* binding */ drawCanvas)\n/* harmony export */ });\n/* harmony import */ var _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view/drawTools.js */ \"./src/js/view/drawTools.js\");\n/* harmony import */ var _data_gridManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/gridManager.js */ \"./src/js/data/gridManager.js\");\n/* harmony import */ var _tileController_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tileController.js */ \"./src/js/tileController.js\");\n/* harmony import */ var _data_TileManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/TileManager.js */ \"./src/js/data/TileManager.js\");\n/* harmony import */ var _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view/renderer.js */ \"./src/js/view/renderer.js\");\n/* harmony import */ var _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data/brushTools.js */ \"./src/js/data/brushTools.js\");\n/* harmony import */ var _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/enumType.js */ \"./src/js/data/enumType.js\");\n/* harmony import */ var _data_mapStack_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./data/mapStack.js */ \"./src/js/data/mapStack.js\");\n/**\n * @file 画布区域的控制器，这个需要等待 tileController 执行完后再执行，\n * 所以将这个 Controller 暴露出去让 tileController 执行\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n\n\n\n\n\n\n // 将这个提取为全局的（核心的地图数据）\n\nvar gridManagerArray = [];\n/**\n * @returns {GridManager[]} 返回 Map\n */\n\nfunction getMapData() {\n  return gridManagerArray;\n}\nfunction drawCanvas() {\n  // 取得画布\n  var canvas = document.getElementById('canvas'); // 取得绘图工具选择\n\n  var toolType = document.getElementById('brushTools'); // 取得图层\n\n  var layer = document.getElementById('layer'); // 显示模式\n\n  var showType = document.getElementById('showType'); // 清空画布\n\n  var cleanButton = document.getElementById('clearCanvas'); // 玩家只能决定地图有多少块画布\n  // 设置网格的行列\n\n  var _gridColSize = 50;\n  var _gridRowSize = 15; // 宽度不变，主要是高度会改变\n\n  var _space = Math.ceil(canvas.width / _gridColSize);\n\n  canvas.height = _space * _gridRowSize;\n  var currentTool = _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.DRAW;\n  var currentLayer = 0;\n  var isShowAll = true;\n\n  toolType.onchange = function (e) {\n    console.log(toolType.options[toolType.selectedIndex].text);\n    currentTool = _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.returnToolType(toolType.selectedIndex);\n  };\n\n  layer.onchange = function (e) {\n    console.log(layer.options[layer.selectedIndex].text);\n    currentLayer = layer.selectedIndex;\n  }; // 这里实例化图层数量个 GridManager\n\n\n  for (var i = 0; i < layer.options.length; i++) {\n    gridManagerArray.push(new _data_gridManager_js__WEBPACK_IMPORTED_MODULE_1__.GridManager(_space, _gridColSize, _gridRowSize));\n  }\n\n  var ctx = canvas.getContext('2d');\n  _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawGrid(ctx, _space, canvas.width, _space * _gridRowSize, _gridColSize, _gridRowSize); // 临时存储当前选中的格子\n\n  var tempGrid; // 标识当前是否按下\n\n  var isDown = false; // 记录按下时所在的格子\n\n  var downPosition = {\n    x: 0,\n    y: 0\n  }; // 记录绘图前的数据，方便撤回\n\n  var tempMap = new _data_mapStack_js__WEBPACK_IMPORTED_MODULE_7__.MapStack(); // 改变了显示模式也需要刷新\n\n  showType.onclick = function (e) {\n    if (e.target.tagName == 'INPUT') {\n      isShowAll = e.target.value == '0';\n      console.log(isShowAll);\n      _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refresh(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)());\n    }\n  }; // 监听清空画布\n\n\n  cleanButton.onclick = function (e) {\n    // 清空了画布之前需要入栈\n    tempMap.push({\n      layer: currentLayer,\n      map: gridManagerArray[currentLayer].getClone()\n    });\n    gridManagerArray[currentLayer].cleanMap();\n    _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refresh(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)());\n    console.log('清空当前图层');\n  }; // 监听撤回键（使用栈）\n\n\n  document.onkeydown = function (e) {\n    if (e.ctrlKey == true && e.key == 'z') {\n      // 如果栈内不为空才撤回\n      if (tempMap.size() !== 0) {\n        // 弹栈\n        var temp = tempMap.pop();\n        gridManagerArray[temp.layer].setMap(temp.map);\n        console.log(tempMap.size());\n        _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refresh(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)());\n        console.log('撤回');\n      }\n    }\n  }; // 鼠标点击绘制\n\n\n  canvas.onmousedown = function (e) {\n    var tempX = Math.floor(e.offsetY / _space);\n    var tempY = Math.floor(e.offsetX / _space); // 入栈时必须加上当前的 Layer\n\n    tempMap.push({\n      layer: currentLayer,\n      map: gridManagerArray[currentLayer].getClone()\n    });\n    isDown = true;\n    downPosition.x = tempX;\n    downPosition.y = tempY; // 如果是空的则无法绘制\n    // 因为橡皮擦不显示 Tile，只显示阴影，所以需要单独拿出来\n\n    switch (currentTool) {\n      // 单笔刷点击时的绘制\n      case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.DRAW:\n        _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.singleDownBrush(gridManagerArray, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), currentLayer, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y, tempX, tempY);\n        break;\n      // 油漆桶\n\n      case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.FILL:\n        _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.fillDownBrush(_gridRowSize, _gridColSize, gridManagerArray, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), currentLayer, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y);\n        break;\n      // 橡皮擦\n\n      case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.ERASE:\n        _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.Erase(gridManagerArray, currentLayer, tempX, tempY);\n        break;\n    } // 因为橡皮擦不显示 Tile，只显示阴影，所以需要单独拿出来\n\n\n    if (currentTool == _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.ERASE) {\n      // 刷新画布\n      _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refreshAndShowDark(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), tempX, tempY);\n    } else {\n      // 单笔刷未点击时的绘制\n      _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refreshAndShowTile(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y, tempX, tempY);\n    }\n  }; // 鼠标离开屏幕时\n\n\n  canvas.onmouseout = function (e) {\n    isDown = false;\n  }; // 鼠标松开时\n\n\n  canvas.onmouseup = function (e) {\n    isDown = false;\n  }; // 鼠标移动时（核心区域）\n\n\n  canvas.onmousemove = function (e) {\n    var tempX = Math.floor(e.offsetY / _space);\n    var tempY = Math.floor(e.offsetX / _space); // 如果超出屏幕则直接返回\n\n    if (tempY > _gridColSize - 1 || tempX > _gridRowSize - 1 || tempX < 0 || tempY < 0) {\n      return;\n    } // 只有在不同的格子里才要重绘（否则会在一个格子里面不断的重绘）\n\n\n    if (tempGrid != gridManagerArray[currentLayer].getGrid(tempX, tempY)) {\n      tempGrid = gridManagerArray[currentLayer].getGrid(tempX, tempY); // 只有点击了才能使用笔刷\n\n      if (isDown) {\n        switch (currentTool) {\n          // 单笔刷点击时的绘制\n          case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.DRAW:\n            _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.singleDownBrush(gridManagerArray, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), currentLayer, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y, tempX, tempY);\n            break;\n          // 如果是选区笔刷\n\n          case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.DRAWAREA:\n            _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.areaDownBrush(gridManagerArray, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), currentLayer, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y, downPosition.x, downPosition.y, tempX, tempY);\n            break;\n          // 橡皮擦\n\n          case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.ERASE:\n            _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.Erase(gridManagerArray, currentLayer, tempX, tempY);\n            break;\n          // 选区橡皮擦\n\n          case _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.ERASEAREA:\n            _data_brushTools_js__WEBPACK_IMPORTED_MODULE_5__.BrushTools.areaErase(gridManagerArray, currentLayer, downPosition.x, downPosition.y, tempX, tempY);\n            break;\n        }\n      } // 因为橡皮擦不显示 Tile，只显示阴影，所以需要单独拿出来\n\n\n      if (currentTool == _data_enumType_js__WEBPACK_IMPORTED_MODULE_6__.Tool.ERASE) {\n        // 刷新画布\n        _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refreshAndShowDark(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), tempX, tempY);\n      } else {\n        // 单笔刷未点击时的绘制\n        _view_renderer_js__WEBPACK_IMPORTED_MODULE_4__.RendererTools.refreshAndShowTile(ctx, canvas, _space, _gridRowSize, _gridColSize, gridManagerArray, currentLayer, isShowAll, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileManage)(), (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().x, (0,_tileController_js__WEBPACK_IMPORTED_MODULE_2__.getTileIndex)().y, tempX, tempY);\n      }\n    }\n  };\n}\n\n//# sourceURL=webpack://MapEditor/./src/js/canvasController.js?");

/***/ }),

/***/ "./src/js/data/TileManager.js":
/*!************************************!*\
  !*** ./src/js/data/TileManager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TileManager\": () => (/* binding */ TileManager)\n/* harmony export */ });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to get private field on non-instance\"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to set private field on non-instance\"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } return value; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file 保存 Tile 在图中的位置\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n/**\n * 单个 Tile 在图片的位置\n */\nvar Tile =\n/**\n * Tile 在贴图里面的位置，以及保存它的路径偏移量（贴图位置和路径偏移量无关，后者是保存它显示在屏幕的位置）\n * @param {Number} x Tile 在贴图里的起始 x\n * @param {Number} y Tile 在贴图里的起始 y\n * @param {Boolean}} isEmpty 是否是空的\n */\nfunction Tile(x, y, isEmpty) {\n  _classCallCheck(this, Tile);\n\n  this.x = x;\n  this.y = y;\n  this.isEmpty = isEmpty;\n};\n/**\n * TileImage 里面的 Tile\n */\n\n\nvar _cols = new WeakMap();\n\nvar _rows = new WeakMap();\n\nvar _img = new WeakMap();\n\nvar _tileMap = new WeakMap();\n\nvar _sWidth = new WeakMap();\n\nvar _sHeight = new WeakMap();\n\nvar _tileIsEmpty = new WeakSet();\n\nvar TileManager = /*#__PURE__*/function () {\n  // 使用 # 号可以标识私有变量\n\n  /**\n   * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context 用于检测图像是否是空的\n   * @param {Number} cols Tile贴图的宽度（一列有多少个 Tile）\n   * @param {Number} rows Tile贴图的高度（一行有多少个 Tile）\n   * @param {HTMLImageElement} img 这里传入的 Tile 贴图，必须放在 onload 里面执行\n   */\n  function TileManager(_ctx, cols, rows, _img2) {\n    _classCallCheck(this, TileManager);\n\n    _tileIsEmpty.add(this);\n\n    _cols.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _rows.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _img.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _tileMap.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _sWidth.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _sHeight.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _cols, cols);\n\n    _classPrivateFieldSet(this, _rows, rows);\n\n    _classPrivateFieldSet(this, _img, _img2);\n\n    _classPrivateFieldSet(this, _tileMap, []);\n\n    _classPrivateFieldSet(this, _sWidth, 0); // 每个单元格的宽度\n\n\n    _classPrivateFieldSet(this, _sHeight, 0); // 每个单元格的高度\n\n\n    _classPrivateFieldSet(this, _sWidth, _classPrivateFieldGet(this, _img).width / _classPrivateFieldGet(this, _cols)); // 切图的宽度\n\n\n    _classPrivateFieldSet(this, _sHeight, _classPrivateFieldGet(this, _img).height / _classPrivateFieldGet(this, _rows)); // 切图的高度\n\n\n    for (var col = 0; col < _classPrivateFieldGet(this, _cols); col++) {\n      var temp = [];\n\n      for (var row = 0; row < _classPrivateFieldGet(this, _rows); row++) {\n        // 还要判断当前的图是否是空的\n        var tempX = row * _classPrivateFieldGet(this, _sHeight);\n\n        var tempY = col * _classPrivateFieldGet(this, _sWidth);\n\n        temp.push(new Tile(tempX, tempY, _classPrivateMethodGet(this, _tileIsEmpty, _tileIsEmpty2).call(this, _ctx, _img2, tempX, tempY, _classPrivateFieldGet(this, _sWidth))));\n      }\n\n      _classPrivateFieldGet(this, _tileMap).push(temp);\n    }\n  }\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context 用于检测图像是否是空的\n   * @param {HTMLImageElement} img 这里传入的 Tile 贴图，必须放在 onload 里面执行\n   * @param {Number} x 起点x\n   * @param {Number} y 起点y\n   * @param {Number} space 大小\n   * @returns {Boolean} true 表示是空的\n   */\n\n\n  _createClass(TileManager, [{\n    key: \"isEmpty\",\n    value:\n    /**\n     * @param {Number} x Tile 的索引\n     * @param {Number} y Tile 的索引\n     * @returns {Boolean} 返回 当前位置的格子是否是空的\n     */\n    function isEmpty(x, y) {\n      return _classPrivateFieldGet(this, _tileMap)[x][y].isEmpty;\n    }\n    /**\n     * @returns {Number} 返回 cols\n     */\n\n  }, {\n    key: \"getCols\",\n    value: function getCols() {\n      return _classPrivateFieldGet(this, _cols);\n    }\n    /**\n     * @returns {Number} 返回 rows\n     */\n\n  }, {\n    key: \"getRows\",\n    value: function getRows() {\n      return _classPrivateFieldGet(this, _rows);\n    }\n    /**\n     *\n     * @param {Number} x Tile 的索引\n     * @param {Number} y Tile 的索引\n     * @returns {Tile} 返回 index 执行的 Tile\n     */\n\n  }, {\n    key: \"getTile\",\n    value: function getTile(x, y) {\n      return _classPrivateFieldGet(this, _tileMap)[x][y];\n    }\n    /**\n     * @returns {HTMLImageElement} 返回 Image\n     */\n\n  }, {\n    key: \"getImage\",\n    value: function getImage() {\n      return _classPrivateFieldGet(this, _img);\n    }\n    /**\n     * @returns {Number} 返回 Tile的高度\n     */\n\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return _classPrivateFieldGet(this, _sHeight);\n    }\n    /**\n     * @returns {Number} 返回 Tile的宽度\n     */\n\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return _classPrivateFieldGet(this, _sWidth);\n    }\n  }]);\n\n  return TileManager;\n}();\n\nvar _tileIsEmpty2 = function _tileIsEmpty2(ctx, img, x, y, space) {\n  // 清除画布\n  ctx.clearRect(0, 0, space, space); // 图片绘制在画布上\n\n  ctx.drawImage(img, x, y, space, space, 0, 0, space, space); // 获取图片像素信息\n\n  var imageData = ctx.getImageData(0, 0, space, space).data; // 只要超过 三分之一的内容就表示当前图像不是空的（因为是 RGBA 所以需要除 4）\n\n  var imageLength = Math.floor(Math.floor(imageData.length / 4));\n  var temp = 0;\n\n  for (var index = 3; index < imageData.length; index += 4) {\n    if (imageData[index] > 0) {\n      temp += 1;\n    }\n  }\n\n  return temp < Math.floor(imageLength / 10);\n};\n\n//# sourceURL=webpack://MapEditor/./src/js/data/TileManager.js?");

/***/ }),

/***/ "./src/js/data/brushTools.js":
/*!***********************************!*\
  !*** ./src/js/data/brushTools.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BrushTools\": () => (/* binding */ BrushTools)\n/* harmony export */ });\n/* harmony import */ var _gridManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridManager.js */ \"./src/js/data/gridManager.js\");\n/* harmony import */ var _TileManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TileManager.js */ \"./src/js/data/TileManager.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @file 笔刷工具，这里主要用来修改数据并调用渲染工具\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n\nvar BrushTools = /*#__PURE__*/function () {\n  function BrushTools() {\n    _classCallCheck(this, BrushTools);\n  }\n\n  _createClass(BrushTools, null, [{\n    key: \"singleDownBrush\",\n    value:\n    /**\n     * 鼠标在画布上拖动时（点击时）实时刷新页面，单笔刷\n     * 还需要把数据存起来\n     *\n     * @param {GridManager[]} gridManagerArray\n     * @param {TileManager} tileManager 用于判断当前是否是空的\n     * @param {Number} layer 当前选中的图层\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     * @param {Number} posX 画布上的方块的索引\n     * @param {Number} posY 画布上的方块的索引\n     */\n    function singleDownBrush(gridManagerArray, tileManager, layer, tileX, tileY, posX, posY) {\n      if (tileManager.isEmpty(tileX, tileY)) return; // 将当前选中的格子存储起来\n\n      gridManagerArray[layer].getGrid(posX, posY).tileX = tileX;\n      gridManagerArray[layer].getGrid(posX, posY).tileY = tileY;\n    }\n    /**\n     * 鼠标在画布上拖动时（点击时）实时刷新页面，选区刷还需\n     * 要把数据存起来，这里需要加个判断，如果起点大于终点的\n     * 位置则不刷新的格子\n     *\n     * @param {GridManager[]} gridManagerArray\n     * @param {TileManager} tileManager 用于判断当前是否是空的\n     * @param {Number} layer 当前选中的图层\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     * @param {Number} startPosX 画布上的方块的起点索引\n     * @param {Number} startPosY 画布上的方块的起点索引\n     * @param {Number} endPosX 画布上的方块的当前索引\n     * @param {Number} endPosy 画布上的方块的当前索引\n     */\n\n  }, {\n    key: \"areaDownBrush\",\n    value: function areaDownBrush(gridManagerArray, tileManager, layer, tileX, tileY, startPosX, startPosY, endPosX, endPosY) {\n      if (tileManager.isEmpty(tileX, tileY)) return;\n      var maxPosX;\n      var minPosX;\n      var maxPosY;\n      var minPosY;\n\n      if (startPosX > endPosX) {\n        maxPosX = startPosX;\n        minPosX = endPosX;\n      } else {\n        maxPosX = endPosX;\n        minPosX = startPosX;\n      }\n\n      if (startPosY > endPosY) {\n        maxPosY = startPosY;\n        minPosY = endPosY;\n      } else {\n        maxPosY = endPosY;\n        minPosY = startPosY;\n      } // 将当前选中的格子存储起来\n\n\n      for (var i = minPosX; i <= maxPosX; i++) {\n        for (var j = minPosY; j <= maxPosY; j++) {\n          gridManagerArray[layer].getGrid(i, j).tileX = tileX;\n          gridManagerArray[layer].getGrid(i, j).tileY = tileY;\n        }\n      }\n    }\n    /**\n     * 填充当前画布\n     *\n     * @param {Number} rows\n     * @param {Number} cols\n     * @param {GridManager[]} gridManagerArray\n     * @param {TileManager} tileManager 用于判断当前是否是空的\n     * @param {Number} layer 当前选中的图层\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     */\n\n  }, {\n    key: \"fillDownBrush\",\n    value: function fillDownBrush(rows, cols, gridManagerArray, tileManager, layer, tileX, tileY) {\n      if (tileManager.isEmpty(tileX, tileY)) return; // 将当前选中的格子存储起来\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < cols; j++) {\n          gridManagerArray[layer].getGrid(i, j).tileX = tileX;\n          gridManagerArray[layer].getGrid(i, j).tileY = tileY;\n        }\n      }\n    }\n    /**\n     * 将当前选中的格子设置为 null\n     *\n     * @param {GridManager[]} gridManagerArray\n     * @param {Number} layer 当前选中的图层\n     * @param {Number} posX 画布上的方块的索引\n     * @param {Number} posY 画布上的方块的索引\n     */\n\n  }, {\n    key: \"Erase\",\n    value: function Erase(gridManagerArray, layer, posX, posY) {\n      gridManagerArray[layer].getGrid(posX, posY).tileX = null;\n      gridManagerArray[layer].getGrid(posX, posY).tileY = null;\n    }\n    /**\n     * 将当前选中的区域设置为 null\n     *\n     * @param {GridManager[]} gridManagerArray\n     * @param {Number} layer 当前选中的图层\n     * @param {Number} startPosX 画布上的方块的起点索引\n     * @param {Number} startPosY 画布上的方块的起点索引\n     * @param {Number} endPosX 画布上的方块的当前索引\n     * @param {Number} endPosy 画布上的方块的当前索引\n     */\n\n  }, {\n    key: \"areaErase\",\n    value: function areaErase(gridManagerArray, layer, startPosX, startPosY, endPosX, endPosY) {\n      var maxPosX;\n      var minPosX;\n      var maxPosY;\n      var minPosY;\n\n      if (startPosX > endPosX) {\n        maxPosX = startPosX;\n        minPosX = endPosX;\n      } else {\n        maxPosX = endPosX;\n        minPosX = startPosX;\n      }\n\n      if (startPosY > endPosY) {\n        maxPosY = startPosY;\n        minPosY = endPosY;\n      } else {\n        maxPosY = endPosY;\n        minPosY = startPosY;\n      } // 将当前选中的格子存储起来\n\n\n      for (var i = minPosX; i <= maxPosX; i++) {\n        for (var j = minPosY; j <= maxPosY; j++) {\n          gridManagerArray[layer].getGrid(i, j).tileX = null;\n          gridManagerArray[layer].getGrid(i, j).tileY = null;\n        }\n      }\n    }\n  }]);\n\n  return BrushTools;\n}();\n\n//# sourceURL=webpack://MapEditor/./src/js/data/brushTools.js?");

/***/ }),

/***/ "./src/js/data/enumType.js":
/*!*********************************!*\
  !*** ./src/js/data/enumType.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tool\": () => (/* binding */ Tool)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @file 存放常用的枚举类型（利用属性模拟枚举）\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n/**\n * 这里主要是标识所用的工具\n */\nvar Tool = /*#__PURE__*/function () {\n  function Tool() {\n    _classCallCheck(this, Tool);\n  }\n\n  _createClass(Tool, null, [{\n    key: \"DRAW\",\n    get:\n    /**\n     * 单笔刷\n     */\n    function get() {\n      return 0;\n    }\n    /**\n     * 选区刷\n     */\n\n  }, {\n    key: \"DRAWAREA\",\n    get: function get() {\n      return 1;\n    }\n    /**\n     * 油漆桶\n     */\n\n  }, {\n    key: \"FILL\",\n    get: function get() {\n      return 2;\n    }\n    /**\n     * 橡皮擦\n     */\n\n  }, {\n    key: \"ERASE\",\n    get: function get() {\n      return 3;\n    }\n    /**\n     * 选区擦\n     */\n\n  }, {\n    key: \"ERASEAREA\",\n    get: function get() {\n      return 4;\n    }\n    /**\n     * 返回当前选中的工具类型\n     * @param {Number} index 索引\n     */\n\n  }, {\n    key: \"returnToolType\",\n    value: function returnToolType(index) {\n      switch (index) {\n        case 0:\n          return Tool.DRAW;\n\n        case 1:\n          return Tool.DRAWAREA;\n\n        case 2:\n          return Tool.FILL;\n\n        case 3:\n          return Tool.ERASE;\n\n        case 4:\n          return Tool.ERASEAREA;\n\n        default:\n          return Tool.DRAW;\n      }\n    }\n  }]);\n\n  return Tool;\n}();\n\nObject.freeze(Tool); // 冻结对象，防止修改\n\n\n\n//# sourceURL=webpack://MapEditor/./src/js/data/enumType.js?");

/***/ }),

/***/ "./src/js/data/gridManager.js":
/*!************************************!*\
  !*** ./src/js/data/gridManager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridManager\": () => (/* binding */ GridManager)\n/* harmony export */ });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to get private field on non-instance\"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to set private field on non-instance\"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } return value; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file 存放格子的位置数据\n *\n * @author alsritter(alsritter1@gmail.com)\n */\nvar Grid =\n/**\n * 存储一个格子的位置（左上角）\n * @param {Number} x 当前格子在 Map里面的x轴坐标\n * @param {Number} y 当前格子在 Map里面的y轴坐标\n * @param {Number | null} tileX 这个格子对应的 Tile索引\n * @param {Number | null} tileY 这个格子对应的 Tile索引\n */\nfunction Grid(x, y, tileX, tileY) {\n  _classCallCheck(this, Grid);\n\n  this.x = x;\n  this.y = y;\n  this.tileX = tileX;\n  this.tileY = tileY;\n}; // 存储的 Map 示意图\n// let map = [\n//   [ 0,  4,  8,  4,  8, 12],\n//   [ 1,  5,  9,  5,  9, 13],\n//   [13,  6, 10,  6, 10, 14],\n//   [ 2,  5,  9,  5,  9, 14],\n//   [13,  6, 10,  6, 10, 13],\n//   [ 3,  7, 11,  4,  8, 15]\n// ];\n\n\nvar _map = new WeakMap();\n\nvar _cols = new WeakMap();\n\nvar _rows = new WeakMap();\n\nvar GridManager = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {Number} space 一个格子的大小\n   * @param {Number} cols 一行有多少个格子\n   * @param {Number} rows 一列一多少个格子\n   */\n  function GridManager(space, cols, rows) {\n    _classCallCheck(this, GridManager);\n\n    _map.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _cols.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _rows.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    // 先初始化 Map\n    _classPrivateFieldSet(this, _map, []);\n\n    _classPrivateFieldSet(this, _cols, cols);\n\n    _classPrivateFieldSet(this, _rows, rows);\n\n    for (var i = 0; i < rows; i++) {\n      var temp = [];\n\n      for (var j = 0; j < cols; j++) {\n        // 初始化先赋值为 null\n        temp.push(new Grid(j * space, i * space, null, null));\n      }\n\n      _classPrivateFieldGet(this, _map).push(temp);\n    }\n  }\n  /**\n   * 获取 Grid\n   *\n   * @param {Number} x 一行的第几个格子\n   * @param {Number} y 一列的第几个格子\n   * @returns {Grid} 返回 Grid\n   */\n\n\n  _createClass(GridManager, [{\n    key: \"getGrid\",\n    value: function getGrid(x, y) {\n      return _classPrivateFieldGet(this, _map)[x][y];\n    }\n    /**\n     * @returns {Number} 返回 Cols\n     */\n\n  }, {\n    key: \"getColNum\",\n    value: function getColNum() {\n      return _classPrivateFieldGet(this, _cols);\n    }\n    /**\n     * @returns {Number} 返回 Rows\n     */\n\n  }, {\n    key: \"getRowNum\",\n    value: function getRowNum() {\n      return _classPrivateFieldGet(this, _rows);\n    }\n    /**\n     * 深拷贝数据\n     * @returns {Object} 返回克隆的 Map\n     */\n\n  }, {\n    key: \"getClone\",\n    value: function getClone() {\n      return JSON.parse(JSON.stringify(_classPrivateFieldGet(this, _map)));\n    }\n    /**\n     * 修改当前的 Map\n     * @param {Object} newMap\n     */\n\n  }, {\n    key: \"setMap\",\n    value: function setMap(newMap) {\n      _classPrivateFieldSet(this, _map, newMap);\n    }\n    /**\n     * 清空当前画布\n     */\n\n  }, {\n    key: \"cleanMap\",\n    value: function cleanMap() {\n      for (var i = 0; i < _classPrivateFieldGet(this, _map).length; i++) {\n        var temp = _classPrivateFieldGet(this, _map)[i];\n\n        for (var j = 0; j < temp.length; j++) {\n          temp[j].tileX = null;\n          temp[i].tileY = null;\n        }\n\n        _classPrivateFieldGet(this, _map)[i] = temp;\n      }\n    }\n  }]);\n\n  return GridManager;\n}();\n\n//# sourceURL=webpack://MapEditor/./src/js/data/gridManager.js?");

/***/ }),

/***/ "./src/js/data/mapStack.js":
/*!*********************************!*\
  !*** ./src/js/data/mapStack.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MapStack\": () => (/* binding */ MapStack)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to get private field on non-instance\"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to set private field on non-instance\"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } return value; }\n\nvar _arr = new WeakMap();\n\n/**\n * @file 因为 js好像没有栈这种数据结构，所以这里手动实现一个\n * 用于撤回操作（先进后出）\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n/**\n * 自定义的栈结构，主要用来维护 画布数据\n */\nvar MapStack = /*#__PURE__*/function () {\n  function MapStack() {\n    _classCallCheck(this, MapStack);\n\n    _arr.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _arr, []);\n  }\n  /**\n   * 压栈操作\n   * @param {Object} map \n   */\n\n\n  _createClass(MapStack, [{\n    key: \"push\",\n    value: function push(map) {\n      _classPrivateFieldGet(this, _arr).push(map);\n    }\n    /**\n     * 退栈操作\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return _classPrivateFieldGet(this, _arr).pop();\n    }\n    /**\n     * 获取栈顶元素\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      return _classPrivateFieldGet(this, _arr)[_classPrivateFieldGet(this, _arr).length - 1];\n    }\n    /**\n     * 获取栈长\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      return _classPrivateFieldGet(this, _arr).length;\n    }\n    /**\n     * 清空栈\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldSet(this, _arr, []);\n\n      return true;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return _classPrivateFieldGet(this, _arr).toString();\n    }\n  }]);\n\n  return MapStack;\n}();\n\n//# sourceURL=webpack://MapEditor/./src/js/data/mapStack.js?");

/***/ }),

/***/ "./src/js/exportMapData.js":
/*!*********************************!*\
  !*** ./src/js/exportMapData.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"exportData\": () => (/* binding */ exportData)\n/* harmony export */ });\n/* harmony import */ var _canvasController_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvasController.js */ \"./src/js/canvasController.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar Pos = function Pos(tileX, tileY) {\n  _classCallCheck(this, Pos);\n\n  this.tileX = tileX;\n  this.tileY = tileY;\n};\n/**\n * 输出的结构应该是由全部所使用到的图块数据，以及下面几层都是引用这个图块的索引\n */\n\n\nfunction exportData() {\n  var exportButton = document.getElementById('exportData');\n\n  exportButton.onclick = function (e) {\n    var maps = (0,_canvasController_js__WEBPACK_IMPORTED_MODULE_0__.getMapData)();\n    var layerData = []; // 存储用到了哪些图块，方便 Unity 一开始就生成好对应的 Sprite\n\n    var spritePos = [new Pos(0, 0)]; // 默认创建一个\n    // 第一层遍历是取得各个图层的数据\n\n    for (var i = 0; i < maps.length; i++) {\n      var tempMap = maps[i].getClone();\n      var y_map = []; // 这里两层 for 是遍历 Map 取得数据 \n\n      for (var j = 0; j < tempMap.length; j++) {\n        var c_temp = tempMap[j];\n        var x_map = [];\n\n        for (var k = 0; k < c_temp.length; k++) {\n          c_temp[k].tileX = c_temp[k].tileX == null ? 0 : c_temp[k].tileX;\n          c_temp[k].tileY = c_temp[k].tileY == null ? 0 : c_temp[k].tileY; // 标识图块索引\n\n          var p_temp = 0;\n          var isExist = false; //标识是否存在\n          // 判断当前是否存在这个 spritePos 存在则直接返回这个索引，否则先创建了再返回索引\n\n          for (var p = 0; p < spritePos.length; p++) {\n            if (spritePos[p].tileX == c_temp[k].tileX && spritePos[p].tileY == c_temp[k].tileY) {\n              p_temp = p;\n              isExist = true;\n              break;\n            }\n          }\n\n          if (!isExist) {\n            spritePos.push(new Pos(c_temp[k].tileX, c_temp[k].tileY));\n            p_temp = spritePos.length - 1; // 数组长度减一表示最后一个\n\n            isExist = false; // 重置\n          }\n\n          x_map.push(p_temp);\n        }\n\n        y_map.push(x_map);\n      }\n\n      layerData.push(y_map);\n    }\n\n    var data = {\n      sprites: spritePos,\n      background: layerData[0],\n      collision: layerData[1],\n      traps: layerData[2],\n      foreground: layerData[3]\n    };\n    console.log(data);\n    var content = JSON.stringify(data);\n    var eleLink = document.createElement('a');\n    eleLink.download = 'mapData.json';\n    eleLink.style.display = 'none'; // 字符内容转变成blob地址\n\n    var blob = new Blob([content]);\n    eleLink.href = URL.createObjectURL(blob); // 触发点击\n\n    document.body.appendChild(eleLink);\n    eleLink.click(); // 然后移除\n\n    document.body.removeChild(eleLink);\n  };\n}\n\n//# sourceURL=webpack://MapEditor/./src/js/exportMapData.js?");

/***/ }),

/***/ "./src/js/tileController.js":
/*!**********************************!*\
  !*** ./src/js/tileController.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTileIndex\": () => (/* binding */ getTileIndex),\n/* harmony export */   \"getTileManage\": () => (/* binding */ getTileManage)\n/* harmony export */ });\n/* harmony import */ var _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view/drawTools.js */ \"./src/js/view/drawTools.js\");\n/* harmony import */ var _data_gridManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/gridManager.js */ \"./src/js/data/gridManager.js\");\n/* harmony import */ var _data_TileManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data/TileManager.js */ \"./src/js/data/TileManager.js\");\n/* harmony import */ var _canvasController_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canvasController.js */ \"./src/js/canvasController.js\");\n/* harmony import */ var _exportMapData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exportMapData.js */ \"./src/js/exportMapData.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file 取色器区域的控制器\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n\n\n\n\n/**\n * Tile 的索引\n */\n\nvar TileIndex = function TileIndex() {\n  _classCallCheck(this, TileIndex);\n\n  this.x = 0;\n  this.y = 0;\n};\n\nvar _tileIndex = new TileIndex();\n\nvar _tileManager; // 需要把这个传递出去，所以这里需要提升到全局\n\n\nfunction drawTiles() {\n  // 先绘制网格\n  var canvas = document.getElementById('tileCanvas');\n  var img = new Image();\n\n  img.onload = function () {\n    canvas.width = img.width;\n    canvas.height = img.height;\n    var _cols = 16;\n    var _rows = 16; // 先获取每个图形格子的大小\n\n    var _space = img.width / _cols;\n\n    var ctx = canvas.getContext('2d');\n    var gridManager = new _data_gridManager_js__WEBPACK_IMPORTED_MODULE_1__.GridManager(_space, _cols, _rows);\n    _tileManager = new _data_TileManager_js__WEBPACK_IMPORTED_MODULE_2__.TileManager(ctx, _cols, _rows, img);\n    _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawBackground(ctx, canvas.width, canvas.height);\n    _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawAllTile(ctx, _tileManager, gridManager, _space); // 根据鼠标点击取得格子\n\n    canvas.onmousedown = function (e) {\n      var temp = gridManager.getGrid(Math.floor(e.offsetY / _space), Math.floor(e.offsetX / _space));\n      _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawDark(ctx, _space, temp.x, temp.y); // 修改下当前选中的 Tile的索引\n\n      _tileIndex.x = Math.floor(e.offsetY / _space);\n      _tileIndex.y = Math.floor(e.offsetX / _space);\n    };\n\n    canvas.onmouseup = function (e) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawBackground(ctx, canvas.width, canvas.height);\n      _view_drawTools_js__WEBPACK_IMPORTED_MODULE_0__.DrawTools.drawAllTile(ctx, _tileManager, gridManager, _space);\n    }; // 等待取色器执行完成再执行这块\n\n\n    (0,_canvasController_js__WEBPACK_IMPORTED_MODULE_3__.drawCanvas)(); // 等待上面的画布加载完成才能导出数据\n\n    (0,_exportMapData_js__WEBPACK_IMPORTED_MODULE_4__.exportData)();\n  };\n\n  img.src = './src/img/tiles.png';\n}\n\nwindow.addEventListener('load', drawTiles, false);\n/**\n * 用来传递当前取色器取到的格子给下面的画布\n *\n * @returns {TileIndex} 返回 TileIndex\n */\n\nfunction getTileIndex() {\n  return _tileIndex;\n}\n/**\n * 用来传递当前的TileManager\n *\n * @returns {TileManager} 返回 TileManager\n */\n\nfunction getTileManage() {\n  return _tileManager;\n}\n\n//# sourceURL=webpack://MapEditor/./src/js/tileController.js?");

/***/ }),

/***/ "./src/js/view/drawTools.js":
/*!**********************************!*\
  !*** ./src/js/view/drawTools.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DrawTools\": () => (/* binding */ DrawTools)\n/* harmony export */ });\n/* harmony import */ var _data_gridManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/gridManager.js */ \"./src/js/data/gridManager.js\");\n/* harmony import */ var _data_TileManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/TileManager.js */ \"./src/js/data/TileManager.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classStaticPrivateMethodGet(receiver, classConstructor, method) { if (receiver !== classConstructor) { throw new TypeError(\"Private static access of wrong provenance\"); } return method; }\n\n/**\n * @file 存放绘制工具\n *\n * @author alsritter(alsritter1@gmail.com)\n */\n\n\nvar DrawTools = /*#__PURE__*/function () {\n  function DrawTools() {\n    _classCallCheck(this, DrawTools);\n  }\n\n  _createClass(DrawTools, null, [{\n    key: \"drawGrid\",\n    value:\n    /**\n     * 绘制网格\n     *\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {Number} space 一个格子的大小\n     * @param {Number} width 画布的宽度\n     * @param {Number} height 画布的高度\n     * @param {Number} gridWithSize 一行多少个格子\n     * @param {Number} gridHeightSize 一列有多少个格子\n     */\n    function drawGrid(ctx, space, width, height, gridWithSize, gridHeightSize) {\n      // 采用遍历的方式，绘画x轴的线条\n      for (var i = 0; i < gridWithSize; i++) {\n        ctx.beginPath(); // 开启路径，设置不同的样式\n\n        ctx.moveTo(space * i - 0.5, 0); // -0.5是为了解决像素模糊问题\n\n        ctx.lineTo(space * i - 0.5, height);\n        ctx.setLineDash([1, 2]); //绘制虚线\n\n        ctx.strokeStyle = '#2a2a2a'; // 设置每个线条的颜色\n\n        ctx.stroke();\n      } // 同理y轴\n\n\n      for (var _i = 0; _i < gridHeightSize; _i++) {\n        ctx.beginPath(); // 开启路径，设置不同的样式\n\n        ctx.moveTo(0, space * _i - 0.5);\n        ctx.lineTo(width, space * _i - 0.5);\n        ctx.strokeStyle = '#2a2a2a';\n        ctx.stroke();\n      }\n    }\n    /**\n     * 让指定的位置变暗\n     *\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {Number} space 一个格子的大小\n     * @param {Number} x 绘制目的地的 x\n     * @param {Number} y 绘制目的地的 y\n     */\n\n  }, {\n    key: \"drawDark\",\n    value: function drawDark(ctx, space, x, y) {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n      ctx.beginPath();\n      ctx.rect(x, y, space, space);\n      ctx.fill();\n      ctx.closePath();\n    }\n    /**\n     * 在指定位置绘制一个 Tile 注意这个 X Y 是以这个 ctx 为原点的\n     *\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {TileManager} map 传入 TileManager\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     * @param {Number} space 一个格子的大小\n     * @param {Number} x 绘制目的地的 x\n     * @param {Number} y 绘制目的地的 y\n     */\n\n  }, {\n    key: \"drawTile\",\n    value: function drawTile(ctx, map, tileX, tileY, space, x, y) {\n      ctx.drawImage(map.getImage(), map.getTile(tileX, tileY).x, map.getTile(tileX, tileY).y, map.getWidth(), map.getHeight(), x, y, space, space);\n    }\n    /**\n     * 绘制背景方格\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {Number} width 画布的宽度\n     * @param {Number} height 画布的高度\n     */\n\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(ctx, width, height) {\n      var emptyBox = ctx.createImageData(width, height);\n      var emptyBoxData = emptyBox.data; // 通过 canvas宽高 来遍历一下 canvas 上的所有像素点\n\n      for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n          var point = i * width + j << 2; // << 相当于 * 4\n\n          var rgbData = (i >> 2) + (j >> 2) & 1 == 1 ? 204 : 255; // >> 2 相当于 / 4 取整， & 1相当于 % 2\n\n          emptyBoxData[point] = rgbData;\n          emptyBoxData[point + 1] = rgbData;\n          emptyBoxData[point + 2] = rgbData;\n          emptyBoxData[point + 3] = 255;\n        }\n      }\n\n      ctx.putImageData(emptyBox, 0, 0);\n    }\n    /**\n     * 绘制 pos 里面存储的 Tile\n     *\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {TileManager} map 传入 TileManager\n     * @param {GridManager} pos 传入 位置列表\n     * @param {Number} space 一个格子的大小\n     */\n\n  }, {\n    key: \"drawMapTile\",\n    value: function drawMapTile(ctx, map, pos, space) {\n      for (var i = 0; i < pos.getRowNum(); i++) {\n        for (var j = 0; j < pos.getColNum(); j++) {\n          // 如果还是 null 或者为空的则直接跳过\n          if (pos.getGrid(i, j).tileX != null && pos.getGrid(i, j).tileY != null && !_classStaticPrivateMethodGet(DrawTools, DrawTools, _isEmpty).call(DrawTools, map, pos.getGrid(i, j).tileX, pos.getGrid(i, j).tileY) // 这个判断得放在后面\n          ) {\n              DrawTools.drawTile(ctx, map, pos.getGrid(i, j).tileX, pos.getGrid(i, j).tileY, space, pos.getGrid(i, j).x, pos.getGrid(i, j).y);\n            }\n        }\n      }\n    }\n    /**\n     * 判度当前位置上的图片是否是空的\n     * @param {TileManager} map\n     * @param {Number} tileX\n     * @param {Number} tileY\n     */\n\n  }, {\n    key: \"drawAllTile\",\n    value:\n    /**\n     * 绘制 Map里面的全部 Tile\n     *\n     * @param {CanvasRenderingContext2D} ctx 传入 canvas 的 Context\n     * @param {TileManager} map 传入 TileManager\n     * @param {GridManager} pos 传入 位置列表\n     * @param {Number} space 一个格子的大小\n     */\n    function drawAllTile(ctx, map, pos, space) {\n      for (var i = 0; i < map.getCols(); i++) {\n        for (var j = 0; j < map.getRows(); j++) {\n          DrawTools.drawTile(ctx, map, i, j, space, pos.getGrid(i, j).x, pos.getGrid(i, j).y);\n        }\n      }\n    }\n  }]);\n\n  return DrawTools;\n}();\n\nvar _isEmpty = function _isEmpty(map, tileX, tileY) {\n  return map.getTile(tileX, tileY).isEmpty;\n};\n\n//# sourceURL=webpack://MapEditor/./src/js/view/drawTools.js?");

/***/ }),

/***/ "./src/js/view/renderer.js":
/*!*********************************!*\
  !*** ./src/js/view/renderer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RendererTools\": () => (/* binding */ RendererTools)\n/* harmony export */ });\n/* harmony import */ var _data_TileManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/TileManager.js */ \"./src/js/data/TileManager.js\");\n/* harmony import */ var _data_gridManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/gridManager.js */ \"./src/js/data/gridManager.js\");\n/* harmony import */ var _drawTools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawTools.js */ \"./src/js/view/drawTools.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @file 渲染绘制，这里只负责渲染数据，不负责刷新数据\n *\n * @author author-alsritter(alsritter1@gmail.com)\n */\n\n\n\nvar RendererTools = /*#__PURE__*/function () {\n  function RendererTools() {\n    _classCallCheck(this, RendererTools);\n  }\n\n  _createClass(RendererTools, null, [{\n    key: \"refresh\",\n    value:\n    /**\n     * 基本修改了页面数据都需要调用这个刷新（不绘制选中的 Tile）\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {HTMLElement} canvas\n     * @param {Number} space\n     * @param {Number} rows\n     * @param {Number} cols\n     * @param {GridManager[]} gridManagerArray\n     * @param {Layer} layer 当前选中的图层\n     * @param {Boolean} showAll 是否显示全部图层，true 表示是\n     * @param {TileManager} tileManager\n     */\n    function refresh(ctx, canvas, space, rows, cols, gridManagerArray, layer, showAll, tileManager) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawGrid(ctx, space, canvas.width, space * rows, cols, rows); // 如果显示全部图层则，遍历刷新\n\n      if (showAll) {\n        for (var i = 0; i < gridManagerArray.length; i++) {\n          // 绘制 Map 里面已有的 Tile\n          _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[i], space);\n        }\n      } else {\n        // 绘制 Map 里面已有的 Tile\n        _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[layer], space);\n      }\n    }\n    /**\n     * 作用同上，但是会绘制选中的 Tile\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {HTMLElement} canvas\n     * @param {Number} space\n     * @param {Number} rows\n     * @param {Number} cols\n     * @param {GridManager[]} gridManagerArray\n     * @param {Layer} layer 当前选中的图层\n     * @param {Boolean} showAll 是否显示全部图层，true 表示是\n     * @param {TileManager} tileManager\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     * @param {Number} posX 画布上的方块的索引\n     * @param {Number} posY 画布上的方块的索引\n     */\n\n  }, {\n    key: \"refreshAndShowTile\",\n    value: function refreshAndShowTile(ctx, canvas, space, rows, cols, gridManagerArray, layer, showAll, tileManager, tileX, tileY, posX, posY) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawGrid(ctx, space, canvas.width, space * rows, cols, rows); // 如果显示全部图层则，遍历刷新\n\n      if (showAll) {\n        for (var i = 0; i < gridManagerArray.length; i++) {\n          // 绘制 Map 里面已有的 Tile\n          _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[i], space);\n        }\n      } else {\n        // 绘制 Map 里面已有的 Tile\n        _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[layer], space);\n      } // 显示当前选中的 Tile\n\n\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawTile(ctx, tileManager, tileX, tileY, space, gridManagerArray[layer].getGrid(posX, posY).x, gridManagerArray[layer].getGrid(posX, posY).y); // 绘制阴影\n\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawDark(ctx, space, gridManagerArray[layer].getGrid(posX, posY).x, gridManagerArray[layer].getGrid(posX, posY).y);\n    }\n    /**\n     * 作用同上，但是只绘制阴影\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {HTMLElement} canvas\n     * @param {Number} space\n     * @param {Number} rows\n     * @param {Number} cols\n     * @param {GridManager[]} gridManagerArray\n     * @param {Layer} layer 当前选中的图层\n     * @param {Boolean} showAll 是否显示全部图层，true 表示是\n     * @param {TileManager} tileManager\n     * @param {Number} tileX Tile 的索引\n     * @param {Number} tileY Tile 的索引\n     * @param {Number} posX 画布上的方块的索引\n     * @param {Number} posY 画布上的方块的索引\n     */\n\n  }, {\n    key: \"refreshAndShowDark\",\n    value: function refreshAndShowDark(ctx, canvas, space, rows, cols, gridManagerArray, layer, showAll, tileManager, posX, posY) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawGrid(ctx, space, canvas.width, space * rows, cols, rows); // 如果显示全部图层则，遍历刷新\n\n      if (showAll) {\n        for (var i = 0; i < gridManagerArray.length; i++) {\n          // 绘制 Map 里面已有的 Tile\n          _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[i], space);\n        }\n      } else {\n        // 绘制 Map 里面已有的 Tile\n        _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawMapTile(ctx, tileManager, gridManagerArray[layer], space);\n      } // 绘制阴影\n\n\n      _drawTools_js__WEBPACK_IMPORTED_MODULE_2__.DrawTools.drawDark(ctx, space, gridManagerArray[layer].getGrid(posX, posY).x, gridManagerArray[layer].getGrid(posX, posY).y);\n    }\n  }]);\n\n  return RendererTools;\n}();\n\n//# sourceURL=webpack://MapEditor/./src/js/view/renderer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/tileController.js");
/******/ 	
/******/ })()
;